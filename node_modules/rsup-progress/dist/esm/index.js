var PERSIST_TIME = 150;
var Progress = /** @class */ (function () {
    function Progress(opts) {
        if (opts === void 0) { opts = {}; }
        this._el = document.createElement('div');
        this._state = 0 /* NOTHING */;
        this._opts = {
            maxWidth: '99.8%',
            height: '4px',
            duration: 60000,
            hideDuration: 400,
            zIndex: '9999',
            color: '#ff1a59',
            className: '',
            timing: 'cubic-bezier(0,1,0,1)',
            position: 'top',
            container: document.body,
        };
        this._rafId = null;
        this._timerId = null;
        this._promises = [];
        this._delayTimers = [];
        this.setOptions(opts);
    }
    Progress.prototype.setOptions = function (opts) {
        if (isNumber(opts.maxWidth))
            opts.maxWidth = opts.maxWidth + 'px';
        if (isNumber(opts.height))
            opts.height = opts.height + 'px';
        if (isNumber(opts.zIndex))
            opts.zIndex = String(opts.zIndex);
        var options = assign(this._opts, opts);
        this._el.className = options.className;
        var style = {
            height: options.height,
            background: options.color,
            zIndex: options.zIndex,
            position: '',
            left: '',
            top: '',
            bottom: '',
        };
        switch (options.position) {
            case 'top':
                style.position = 'fixed';
                style.top = '0';
                break;
            case 'bottom':
                style.position = 'fixed';
                style.bottom = '0';
                break;
        }
        this._css(style);
    };
    Progress.prototype._css = function (style) {
        assign(this._el.style, style);
    };
    Object.defineProperty(Progress.prototype, "isInProgress", {
        get: function () {
            return this._state > 0;
        },
        enumerable: false,
        configurable: true
    });
    Progress.prototype.start = function () {
        var _this = this;
        switch (this._state) {
            case 1 /* APPEAR */:
            case 2 /* PENDING */:
            case 3 /* DISAPPEAR_RESTART */:
                return;
            case -1 /* DISAPPEAR */:
                this._state = 3 /* DISAPPEAR_RESTART */;
                return;
        }
        this._state = 1 /* APPEAR */;
        var opts = this._opts;
        var transition = "width " + opts.duration + "ms " + opts.timing;
        this._css({
            width: '0',
            opacity: '1',
            transition: transition,
            webkitTransition: transition,
        });
        opts.container.appendChild(this._el);
        this._rafId = requestAnimationFrame(function () {
            _this._rafId = requestAnimationFrame(function () {
                _this._rafId = null;
                _this._state = 2 /* PENDING */;
                _this._css({ width: _this._opts.maxWidth });
            });
        });
    };
    Progress.prototype.end = function (immediately) {
        var _this = this;
        if (immediately === void 0) { immediately = false; }
        this._promises = [];
        this._delayTimers.splice(0).forEach(clearTimeout);
        switch (this._state) {
            case 0 /* NOTHING */:
                return;
            case 1 /* APPEAR */:
                this._state = 0 /* NOTHING */;
                cancelAnimationFrame(this._rafId);
                this._rafId = null;
                detach(this._el);
                return;
            case -1 /* DISAPPEAR */:
            case 3 /* DISAPPEAR_RESTART */:
                if (immediately) {
                    this._state = 0 /* NOTHING */;
                    clearTimeout(this._timerId);
                    this._timerId = null;
                    detach(this._el);
                }
                else {
                    this._state = -1 /* DISAPPEAR */;
                }
                return;
        }
        if (immediately) {
            this._state = 0 /* NOTHING */;
            detach(this._el);
            return;
        }
        this._state = -1 /* DISAPPEAR */;
        var opts = this._opts;
        var transition = "width 50ms, opacity " + opts.hideDuration + "ms " + PERSIST_TIME + "ms";
        this._css({
            width: '100%',
            opacity: '0',
            transition: transition,
            webkitTransition: transition,
        });
        this._timerId = setTimeout(function () {
            _this._timerId = null;
            var restart = _this._state === 3 /* DISAPPEAR_RESTART */;
            _this._state = 0 /* NOTHING */;
            detach(_this._el);
            if (restart) {
                _this.start();
            }
        }, opts.hideDuration + PERSIST_TIME);
    };
    Progress.prototype.promise = function (p, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, _c = _b.delay, delay = _c === void 0 ? 0 : _c, _d = _b.min, min = _d === void 0 ? 100 : _d;
        var timerId;
        var start = function () {
            if (min > 0) {
                p = Promise.all([p, new Promise(function (res) { return setTimeout(res, min); })]).then(function (_a) {
                    var v = _a[0];
                    return v;
                });
            }
            _this._promises.push(p);
            _this.start();
        };
        var cleanupTimer = function () {
            var timers = _this._delayTimers;
            timers.splice(timers.indexOf(timerId) >>> 0, 1);
            timerId = null;
        };
        if (delay > 0) {
            this._delayTimers.push((timerId = setTimeout(function () {
                cleanupTimer();
                start();
            }, delay)));
        }
        else {
            start();
        }
        var onFinally = function () {
            if (timerId) {
                clearTimeout(timerId);
                cleanupTimer();
                return;
            }
            var promises = _this._promises;
            var idx = promises.indexOf(p);
            if (~idx) {
                promises.splice(idx, 1);
                if (promises.length === 0)
                    _this.end();
            }
        };
        return p.then(function (val) { return (onFinally(), val); }, function (err) { return (onFinally(), Promise.reject(err)); });
    };
    return Progress;
}());
export { Progress };
function isNumber(v) {
    return typeof v === 'number';
}
function assign(target, src) {
    for (var k in src) {
        if (Object.prototype.hasOwnProperty.call(src, k))
            target[k] = src[k];
    }
    return target;
}
function detach(el) {
    if (el.parentNode)
        el.parentNode.removeChild(el);
}
